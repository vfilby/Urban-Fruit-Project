.row
  .span12
    = bootstrap_form_for @fruit_cache, :html => {:multipart => true, :class=>"well form-horizontal"}  do |f|
      - if @fruit_cache.errors.any?
        .alert.alert-block.alert-error
          %a.close{ :'data-dismiss'=>"alert"} 
            Ã—
          %h4.alert-heading 
            Warning!            
            = pluralize(@fruit_cache.errors.count, "error") + " need to be fixed before we can continue"
          %ul
            - @fruit_cache.errors.full_messages.each do |msg|
              %li
                = msg
      %fieldset

        = f.text_field :primary_tag_id, :label => { text: "Name" } do
          %p.helptext The primary category, usually a name like 'Pear' or 'Morel Mushroom'"
        = f.text_area :description, :class => "input-xlarge", rows: 5
        = f.text_field :tags, :class => "input-xlarge" do
          %p.helptext Anything you think is important such as: 'Poisonous', 'Edible', 'Overpicked'
        
        = f.text_field :latitude, :class => "input-xlarge" do
          %p.helptext Drag the marker on the map below to set automatically
        = f.text_field :longitude, :class => "input-xlarge" do
          %p.helptext Drag the marker on the map below to set automatically
           
        .actions
          = f.submit :class => "btn btn-primary"
        %br
          
      - # Default to the cache lat/long, if none assume it's a new cache and
      - # default to the users ip geolocation
      - latitude = @fruit_cache.latitude || lat_long[:latitude] || request.location.latitude || 0.0
      - longitude = @fruit_cache.longitude || lat_long[:longitude] || request.location.longitude || 0.0
      - zoom = (latitude == 0.0 && longitude == 0.0) ? 4 : 16
      - @markers = "[{\"lng\": \"#{longitude}\", \"lat\": \"#{latitude}\" }]" 

      = gmaps({"map_options" => { "zoom" => zoom, "auto_adjust" => true, "auto_zoom" => false },"markers" => { "data" => @markers, "options" => { "draggable" => true } }})
      
      - content_for :scripts do
        :javascript
          Gmaps.map.callback = function() {
            for (var i = 0; i <  this.markers.length; ++i) {
              google.maps.event.addListener(
                Gmaps.map.markers[i].serviceObject, 
                'dragend', 
                function() { 
                  HandleDragend(this.getPosition()) 
                }
              );
            }
          }
          HandleDragend = function(pos) {
            $( '#fruit_cache_latitude' ).val( pos.lat() );
            $( '#fruit_cache_longitude' ).val( pos.lng() );
          }
          $(document).ready(function () {
              $("#fruit_cache_tags").tokenInput("/api/tags/autocomplete",
                { 
                  theme: "facebook",
                  allowCustomEntry: true,
                  prePopulate: #{'[' + @fruit_cache.tags.map { |tag| "{ id: #{tag.id}, name: \"#{tag.tag}\" }"}.join( ', ' ) + ']'}
                }
              );
              
              $("#fruit_cache_primary_tag_id").tokenInput("/api/tags/autocomplete",
                { 
                  theme: "facebook",
                  tokenLimit: 1,
                  allowCustomEntry: true,
                  prePopulate: #{ (@fruit_cache.primary_tag) ? "[ { id: #{@fruit_cache.primary_tag.id}, name: \"#{@fruit_cache.primary_tag.tag}\" } ]" : "[]" },
                  onAdd: function( item ) {
                    $('#fruit_cache_primary_tag_id').prev().addClass( 'list-full' )
                  },
                  onDelete: function( item ) {
                    $('#fruit_cache_primary_tag_id').prev().removeClass( 'list-full' )
                  },
                  onReady: function( item ) {
                    if( $('#fruit_cache_primary_tag_id').prev().children().size()/2 >= 1 ) {
                      $('#fruit_cache_primary_tag_id').prev().addClass( 'list-full' )
                    }
                  }
                }
              );
          });
